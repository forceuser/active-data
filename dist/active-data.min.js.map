{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///active-data.min.js","webpack:///webpack/bootstrap 14a0acbda3aa8a04054e?80ad","webpack:///./src/index.js?9552","webpack:///./src/cjs-entry.js?112a"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","_classCallCheck","instance","Constructor","TypeError","Manager","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","options","$isObservableSymbol","Symbol","$registerRead","$dataSource","observables","WeakMap","cache","enabled","immediateReaction","wholeObjectObserveKey","callStack","reactions","setOptions","arguments","undefined","assign","makeObservable","dataSource","manager","isObservable","observable","toUpdate","Map","invalidateDeps","record","valid","deps","forEach","clear","initUpdates","updates","records","Set","recordMap","set","registerRead","prototypes","add","recordMapItem","uninit","delete","size","rootObj","proto","getPrototypeOf","observableProto","unshift","updateProperty","obj","updKey","Array","from","values","some","idx","indexOf","invalidate","inRunSection","run","runDeferred","Proxy","context","val","Error","isArray","deleteProperty","makeUpdatable","cacheByObject","computing","console","warn","push","pop","makeComputed","callOnGet","callOnSet","makeReaction","updatable","unregister","splice","reaction","action","runScheduled","onAfterRun","_this","setTimeout","getObservableSource","default"],"mappings":"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","file":"active-data.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"activeData\"] = factory();\n\telse\n\t\troot[\"activeData\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"activeData\"] = factory();\n\telse\n\t\troot[\"activeData\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Manager\", function() { return Manager; });\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n* Реактивный менеджер данных, следящий за изменениями данных и выполняющий действия в ответ на эти изменения\n* Отслеживание происходит лениво, данные обновляются только когда они требуются\n*\n* @param {ManagerOptions} [options] Настройки менеджера\n*/\nvar Manager = function () {\n\tfunction Manager(options) {\n\t\t_classCallCheck(this, Manager);\n\n\t\tthis.$isObservableSymbol = Symbol(\"isObservable\");\n\t\tthis.$registerRead = Symbol(\"registerRead\");\n\t\tthis.$dataSource = Symbol(\"dataSource\");\n\t\tthis.observables = new WeakMap();\n\t\tthis.cache = new WeakMap();\n\t\tthis.options = {\n\t\t\tenabled: true,\n\t\t\timmediateReaction: false,\n\t\t\twholeObjectObserveKey: \"$$whole\"\n\t\t};\n\t\tthis.callStack = [];\n\t\tthis.reactions = [];\n\t\tthis.setOptions(options);\n\t}\n\t/**\n * Динамически устанавливает настройки работы менеджера данных\n *\n * @param {ManagerOptions} [options] Настройки менеджера\n */\n\n\n\t_createClass(Manager, [{\n\t\tkey: \"setOptions\",\n\t\tvalue: function setOptions() {\n\t\t\tvar options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t\t\tthis.options = Object.assign(this.options, options);\n\t\t}\n\t\t/**\n  * Создает {@link Observable} объект для указанного источника данный\n  *\n  * @param {(Object|Array)} dataSource источник данных\n  * @return {Observable} отслеживаемый объект\n  */\n\n\t}, {\n\t\tkey: \"makeObservable\",\n\t\tvalue: function makeObservable(dataSource) {\n\t\t\tvar manager = this;\n\t\t\tif (!dataSource) {\n\t\t\t\treturn dataSource;\n\t\t\t}\n\t\t\tif (this.isObservable(dataSource)) {\n\t\t\t\treturn dataSource;\n\t\t\t}\n\t\t\tvar observable = manager.observables.get(dataSource);\n\t\t\tif (!observable) {\n\t\t\t\tvar toUpdate = new Map();\n\t\t\t\tvar invalidateDeps = function invalidateDeps(record) {\n\t\t\t\t\trecord.valid = false;\n\t\t\t\t\trecord.deps.forEach(function (record) {\n\t\t\t\t\t\treturn invalidateDeps(record);\n\t\t\t\t\t});\n\t\t\t\t\trecord.deps.clear();\n\t\t\t\t};\n\n\t\t\t\tvar initUpdates = function initUpdates(key) {\n\t\t\t\t\tvar updates = { records: new Set(), recordMap: new WeakMap() };\n\t\t\t\t\ttoUpdate.set(key, updates);\n\t\t\t\t\treturn updates;\n\t\t\t\t};\n\n\t\t\t\tvar registerRead = function registerRead(record, key, prototypes) {\n\t\t\t\t\t// record stores Updateble state\n\t\t\t\t\tvar updates = toUpdate.get(key);\n\t\t\t\t\tif (!updates) {\n\t\t\t\t\t\tupdates = initUpdates(key);\n\t\t\t\t\t}\n\t\t\t\t\tupdates.records.add(record);\n\t\t\t\t\tvar recordMapItem = updates.recordMap.get(record);\n\t\t\t\t\tif (!recordMapItem) {\n\t\t\t\t\t\trecordMapItem = {};\n\t\t\t\t\t\tupdates.recordMap.set(record, recordMapItem);\n\t\t\t\t\t}\n\t\t\t\t\trecord.uninit.set(dataSource, function (record) {\n\t\t\t\t\t\tupdates.records.delete(record);\n\t\t\t\t\t\tupdates.recordMap.delete(record);\n\t\t\t\t\t\tif (updates.records.size === 0) {\n\t\t\t\t\t\t\ttoUpdate.delete(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tvar isRoot = !prototypes;\n\t\t\t\t\tif (isRoot) {\n\t\t\t\t\t\tprototypes = [dataSource];\n\t\t\t\t\t\trecordMapItem.root = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar rootObj = prototypes[prototypes.length - 1];\n\t\t\t\t\t\tif (!recordMapItem.prototypes) {\n\t\t\t\t\t\t\trecordMapItem.prototypes = new Map();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar _prototypes = recordMapItem.prototypes.get(rootObj);\n\t\t\t\t\t\tif (_prototypes) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trecordMapItem.prototypes.set(rootObj, prototypes);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar proto = Object.getPrototypeOf(dataSource);\n\t\t\t\t\twhile (proto != null && proto != Object.prototype) {\n\t\t\t\t\t\tvar observableProto = manager.observables.get(proto);\n\t\t\t\t\t\tprototypes.unshift(proto);\n\t\t\t\t\t\tif (observableProto != null && observableProto !== Object.prototype) {\n\t\t\t\t\t\t\tobservableProto[manager.$registerRead](record, key, prototypes);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tproto = Object.getPrototypeOf(proto);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar updateProperty = function updateProperty(obj, key) {\n\t\t\t\t\t[key, manager.options.wholeObjectObserveKey].forEach(function (updKey) {\n\t\t\t\t\t\tvar updates = toUpdate.get(updKey);\n\t\t\t\t\t\tif (updates) {\n\t\t\t\t\t\t\tupdates.records.forEach(function (record) {\n\t\t\t\t\t\t\t\tvar recordMapItem = updates.recordMap.get(record);\n\t\t\t\t\t\t\t\tif (recordMapItem.root) {\n\t\t\t\t\t\t\t\t\tinvalidateDeps(record);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar invalidateAll = Array.from(recordMapItem.prototypes.values()).some(function (prototypes) {\n\t\t\t\t\t\t\t\t\t\tvar idx = prototypes.indexOf(obj) + 1;\n\t\t\t\t\t\t\t\t\t\tvar l = prototypes.length;\n\t\t\t\t\t\t\t\t\t\tvar invalidate = true;\n\t\t\t\t\t\t\t\t\t\tfor (var i = idx; i < l; i++) {\n\t\t\t\t\t\t\t\t\t\t\tif (prototypes[i].hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\t\t\t\t\tinvalidate = false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn invalidate;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (invalidateAll) {\n\t\t\t\t\t\t\t\t\t\tinvalidateDeps(record);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// toUpdate.delete(key);\n\n\t\t\t\t\tif (!manager.inRunSection) {\n\t\t\t\t\t\tif (manager.options.immediateReaction) {\n\t\t\t\t\t\t\tmanager.run();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmanager.runDeferred();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tobservable = new Proxy(dataSource, {\n\t\t\t\t\tget: function get(obj, key, context) {\n\t\t\t\t\t\tif (key === manager.$isObservableSymbol) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (key === manager.$dataSource) {\n\t\t\t\t\t\t\treturn dataSource;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (manager.callStack.length) {\n\t\t\t\t\t\t\tif (key === manager.$registerRead) {\n\t\t\t\t\t\t\t\treturn registerRead;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tregisterRead(manager.callStack[manager.callStack.length - 1].record, key);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (key === manager.options.wholeObjectObserveKey) {\n\t\t\t\t\t\t\treturn context;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar val = obj[key];\n\t\t\t\t\t\tif (val === Object(val) && typeof val !== \"function\") {\n\t\t\t\t\t\t\treturn manager.makeObservable(val);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn val;\n\t\t\t\t\t},\n\t\t\t\t\tset: function set(obj, key, val) {\n\t\t\t\t\t\tif (manager.callStack && manager.callStack.length) {\n\t\t\t\t\t\t\tthrow new Error(\"Changing observable objects is restricted inside computed properties and reaction functions!\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (val !== obj[key] || Array.isArray(obj) && key === \"length\") {\n\t\t\t\t\t\t\tobj[key] = val;\n\t\t\t\t\t\t\tupdateProperty(obj, key);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t},\n\t\t\t\t\tdeleteProperty: function deleteProperty(obj, key) {\n\t\t\t\t\t\tupdateProperty(obj, key);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tmanager.observables.set(dataSource, observable);\n\t\t\t}\n\t\t\treturn observable;\n\t\t}\n\t\t/**\n  * Создает {@link UpdatableFunction}\n  * Используется в основном для внутренних целей\n  *\n  * @param {Function} call Функция для которой будет создана {@link UpdatableFunction}\n  * @param {Object} obj Если `call` это метод объекта необходимо указать связанный объект\n  * @return {UpdatableFunction}\n  */\n\n\t}, {\n\t\tkey: \"makeUpdatable\",\n\t\tvalue: function makeUpdatable(call) {\n\t\t\tvar obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n\t\t\tvar manager = this;\n\t\t\tif (obj == null) {\n\t\t\t\tobj = manager;\n\t\t\t}\n\t\t\treturn function () {\n\t\t\t\tvar cacheByObject = manager.cache.get(obj);\n\t\t\t\tvar record = void 0;\n\t\t\t\tif (cacheByObject) {\n\t\t\t\t\trecord = cacheByObject.get(call);\n\t\t\t\t} else {\n\t\t\t\t\tcacheByObject = new Map();\n\t\t\t\t\tmanager.cache.set(obj, cacheByObject);\n\t\t\t\t}\n\n\t\t\t\tif (!record) {\n\t\t\t\t\trecord = { valid: false, value: undefined, deps: new Set(), uninit: new Map() };\n\t\t\t\t\tcacheByObject.set(call, record);\n\t\t\t\t}\n\t\t\t\tif (record.computing) {\n\t\t\t\t\tconsole.warn(\"Detected cross reference inside computed properties! undefined will be returned to prevent infinite loop\");\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (manager.callStack.length) {\n\t\t\t\t\trecord.deps.add(manager.callStack[manager.callStack.length - 1].record);\n\t\t\t\t}\n\n\t\t\t\tif (record.valid) {\n\t\t\t\t\treturn record.value;\n\t\t\t\t}\n\t\t\t\trecord.computing = true;\n\t\t\t\trecord.uninit.forEach(function (uninit) {\n\t\t\t\t\treturn uninit(record);\n\t\t\t\t});\n\t\t\t\trecord.uninit.clear();\n\n\t\t\t\tmanager.callStack.push({ obj: obj, call: call, record: record });\n\t\t\t\ttry {\n\t\t\t\t\tvar context = void 0;\n\t\t\t\t\tif (this) {\n\t\t\t\t\t\tcontext = manager.observables.get(this);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext = manager;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar value = call.call(context, context);\n\t\t\t\t\trecord.valid = true;\n\t\t\t\t\trecord.value = value;\n\t\t\t\t\treturn value;\n\t\t\t\t} finally {\n\t\t\t\t\trecord.computing = false;\n\t\t\t\t\tmanager.callStack.pop();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\t/**\n  * Создает вычисляемое свойство объекта\n  *\n  * @param {Object} obj Объект для которого будет создано вычисляемое свойство\n  * @param {String} key Имя вычисляемого свойства свойства\n  * @param {Function} callOnGet Функция которая будет вычислятся при доступе к свойству\n  * @param {Function} [callOnSet] Функция которая будет выполнятся при установке значения свойства\n  */\n\n\t}, {\n\t\tkey: \"makeComputed\",\n\t\tvalue: function makeComputed(obj, key, callOnGet, callOnSet) {\n\t\t\tObject.defineProperty(obj, key, {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: this.makeUpdatable(callOnGet, obj),\n\t\t\t\tset: callOnSet\n\t\t\t});\n\t\t}\n\t\t/**\n  * Создает {@link UpdatableFunction} и помещает ее в список для проверки\n  * на валидность при изменении данных. Менеджер автозапускает эту\n  * функцию если ее результат стал невалидным\n  *\n  * @param {Function} call\n  *\tФункция для которой будет создана {@link UpdatableFunction}\n  *\tОна будет автозапускатся при изменении {@link Observable} данных использованых при ее вычислении\n  * @param {Boolean} run\n  *\tВыполнить первый запуск реации после ее регистрации.\n  *\tВ зависимости от указанной опции {@link ManagerOptions.immediateReaction}\n  *\tбудет запускатся либо сразу либо по таймауту.\n  *\tЕсли {@link ManagerOptions.enabled} == false то реакция не будет выполнятся даже при установленном параметре run\n  * @return {ReactionHandler} Управляющий объект для зарегестрированной реакции\n  */\n\n\t}, {\n\t\tkey: \"makeReaction\",\n\t\tvalue: function makeReaction(call) {\n\t\t\tvar run = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n\t\t\tvar manager = this;\n\t\t\tvar updatable = this.makeUpdatable(call);\n\t\t\tmanager.reactions.push(updatable);\n\t\t\tif (run) {\n\t\t\t\tif (this.options.immediateReaction) {\n\t\t\t\t\tmanager.run();\n\t\t\t\t} else {\n\t\t\t\t\tmanager.runDeferred();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tunregister: function unregister() {\n\t\t\t\t\tvar idx = manager.reactions.indexOf(updatable);\n\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\tmanager.reactions.splice(idx, 1);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\treaction: updatable\n\t\t\t};\n\t\t}\n\n\t\t/**\n  * Проверяет является ли объект наблюдаемым\n  *\n  * @param {(Observable|Object|Array)} obj\n  */\n\n\t}, {\n\t\tkey: \"isObservable\",\n\t\tvalue: function isObservable(obj) {\n\t\t\treturn obj[this.$isObservableSymbol] === true;\n\t\t}\n\t\t/**\n  * Запускает все автозапускаемые функции которые помечены как невалидные\n  *\n  * @param {Function} [action]\n  *\tДействия выполняемые внутри вызова этой функции\n  * \tне будут вызывать неотложный запуск реакций.\n  * \tРеакции будут запущены только после выхода из функции action\n  */\n\n\t}, {\n\t\tkey: \"run\",\n\t\tvalue: function run(action) {\n\t\t\tif (!this.options.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.inRunSection = true;\n\t\t\ttry {\n\t\t\t\tif (typeof action === \"function\") {\n\t\t\t\t\taction();\n\t\t\t\t}\n\t\t\t\tthis.runScheduled = false;\n\t\t\t\tthis.reactions.forEach(function (updatable) {\n\t\t\t\t\treturn updatable();\n\t\t\t\t});\n\t\t\t\ttypeof this.onAfterRun === \"function\" && this.onAfterRun();\n\t\t\t} finally {\n\t\t\t\tthis.inRunSection = false;\n\t\t\t}\n\t\t}\n\t\t/**\n  * Запускает все {@link UpdatableFunction} которые помечены как невалидные\n  * В отличии от метода {@link run} запускает их не сразу а по указанному таймауту\n  *\n  * @param {Function} [action] Изменения {@link Observable} выполняемые внутри вызова этой функции не будут вызывать неотложный запуск реакций. Реакции будут запускатся после заданного таймаута\n  * @param {Number} [timeout=0] Таймаут запуска выполнения очереди зарегестрированых реакций\n  */\n\n\t}, {\n\t\tkey: \"runDeferred\",\n\t\tvalue: function runDeferred(action) {\n\t\t\tvar _this = this;\n\n\t\t\tif (!this.options.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.inRunSection = true;\n\t\t\ttry {\n\t\t\t\tif (!this.runScheduled) {\n\t\t\t\t\tthis.runScheduled = setTimeout(function () {\n\t\t\t\t\t\treturn _this.run();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (typeof action === \"function\") {\n\t\t\t\t\taction();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tthis.inRunSection = false;\n\t\t\t}\n\t\t}\n\t\t/**\n  * Возвращает исходный объект на основе которого был создан {@link Observable}\n  *\n  * @param {Observable} observable\n  *\t{@link Observable} для которого необходимо получить исходный объект\n  * @return {(Object|Array)} Исходный обьект на основе которого был создан {@link Observable}\n  */\n\n\t}, {\n\t\tkey: \"getObservableSource\",\n\t\tvalue: function getObservableSource(observable) {\n\t\t\treturn observable[this.$dataSource];\n\t\t}\n\t}]);\n\n\treturn Manager;\n}();\n\nManager.default = new Manager();\nManager.default.Manager = Manager;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Manager.default);\n\n/**\n * @typedef ManagerOptions\n * @name ManagerOptions\n * @type {Object}\n * @property {Boolean} immediateReaction - Запускать реакции сразу после изменения данных (по-умолчанию false - т.е. реакции выполняются по нулевому таймауту)\n * @property {Boolean} enabled - Активен ли менеджер данных (по-умолчнию true)\n */\n\n/**\n * @typedef ReactionHandler\n * @name ReactionHandler\n * @type {Object}\n * @property {Function} unregister - Удалить реакцию из списка зарегестрированных реакций\n * @property {UpdatableFunction} reaction - Фунция реакции\n */\n\n/**\n * @typedef Observable\n * @name Observable\n * @description Обьект или массив доступ к свойствам которого отслеживается.\n * При доступе к дочерним объектам или массивам также возвращается {@link Observable} объект\n */\n\n/**\n * @typedef UpdatableFunction\n * @name UpdatableFunction\n * @description Функция которая кеширует результат своего выполнение и хранит состояние валидности результата\n *\n * При изменении {@link Observable} данных которые были использованы при вычилении этой функции ее кеш инвалидируется\n *\n * Внутри {@link UpdatableFunction} разрешено только чтение {@link Observable}, при записи будет брошено исключение\n *\n * Если внутри таких функций есть перекрестные ссылки то вычисление производится не будет, будет возвращено `undefined`\n */\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(0).default;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// active-data.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 14a0acbda3aa8a04054e","/**\n* Реактивный менеджер данных, следящий за изменениями данных и выполняющий действия в ответ на эти изменения\n* Отслеживание происходит лениво, данные обновляются только когда они требуются\n*\n* @param {ManagerOptions} [options] Настройки менеджера\n*/\nexport class Manager {\n\tconstructor (options) {\n\t\tthis.$isObservableSymbol = Symbol(\"isObservable\");\n\t\tthis.$registerRead = Symbol(\"registerRead\");\n\t\tthis.$dataSource = Symbol(\"dataSource\");\n\t\tthis.observables = new WeakMap();\n\t\tthis.cache = new WeakMap();\n\t\tthis.options = {\n\t\t\tenabled: true,\n\t\t\timmediateReaction: false,\n\t\t\twholeObjectObserveKey: \"$$whole\"\n\t\t};\n\t\tthis.callStack = [];\n\t\tthis.reactions = [];\n\t\tthis.setOptions(options);\n\t}\n\t/**\n\t* Динамически устанавливает настройки работы менеджера данных\n\t*\n\t* @param {ManagerOptions} [options] Настройки менеджера\n\t*/\n\tsetOptions (options = {}) {\n\t\tthis.options = Object.assign(this.options, options);\n\t}\n\t/**\n\t* Создает {@link Observable} объект для указанного источника данный\n\t*\n\t* @param {(Object|Array)} dataSource источник данных\n\t* @return {Observable} отслеживаемый объект\n\t*/\n\tmakeObservable (dataSource) {\n\t\tconst manager = this;\n\t\tif (!dataSource) {\n\t\t\treturn dataSource;\n\t\t}\n\t\tif (this.isObservable(dataSource)) {\n\t\t\treturn dataSource;\n\t\t}\n\t\tlet observable = manager.observables.get(dataSource);\n\t\tif (!observable) {\n\t\t\tconst toUpdate = new Map();\n\t\t\tconst invalidateDeps = (record) => {\n\t\t\t\trecord.valid = false;\n\t\t\t\trecord.deps.forEach(record => invalidateDeps(record));\n\t\t\t\trecord.deps.clear();\n\t\t\t};\n\n\t\t\tconst initUpdates = (key) => {\n\t\t\t\tconst updates = {records: new Set(), recordMap: new WeakMap()};\n\t\t\t\ttoUpdate.set(key, updates);\n\t\t\t\treturn updates;\n\t\t\t};\n\n\t\t\tconst registerRead = (record, key, prototypes) => {\n\t\t\t\t// record stores Updateble state\n\t\t\t\tlet updates = toUpdate.get(key);\n\t\t\t\tif (!updates) {\n\t\t\t\t\tupdates = initUpdates(key);\n\t\t\t\t}\n\t\t\t\tupdates.records.add(record);\n\t\t\t\tlet recordMapItem = updates.recordMap.get(record);\n\t\t\t\tif (!recordMapItem) {\n\t\t\t\t\trecordMapItem = {};\n\t\t\t\t\tupdates.recordMap.set(record, recordMapItem);\n\t\t\t\t}\n\t\t\t\trecord.uninit.set(dataSource, record => {\n\t\t\t\t\tupdates.records.delete(record);\n\t\t\t\t\tupdates.recordMap.delete(record);\n\t\t\t\t\tif (updates.records.size === 0) {\n\t\t\t\t\t\ttoUpdate.delete(key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconst isRoot = !prototypes;\n\t\t\t\tif (isRoot) {\n\t\t\t\t\tprototypes = [dataSource];\n\t\t\t\t\trecordMapItem.root = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst rootObj = prototypes[prototypes.length - 1];\n\t\t\t\t\tif (!recordMapItem.prototypes) {\n\t\t\t\t\t\trecordMapItem.prototypes = new Map();\n\t\t\t\t\t}\n\t\t\t\t\tconst _prototypes = recordMapItem.prototypes.get(rootObj);\n\t\t\t\t\tif (_prototypes) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\trecordMapItem.prototypes.set(rootObj, prototypes);\n\t\t\t\t}\n\n\t\t\t\tlet proto = Object.getPrototypeOf(dataSource);\n\t\t\t\twhile (proto != null && proto != Object.prototype) {\n\t\t\t\t\tconst observableProto = manager.observables.get(proto);\n\t\t\t\t\tprototypes.unshift(proto);\n\t\t\t\t\tif (observableProto != null && observableProto !== Object.prototype) {\n\t\t\t\t\t\tobservableProto[manager.$registerRead](record, key, prototypes);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tproto = Object.getPrototypeOf(proto);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst updateProperty = (obj, key) => {\n\t\t\t\t[key, manager.options.wholeObjectObserveKey].forEach(updKey => {\n\t\t\t\t\tconst updates = toUpdate.get(updKey);\n\t\t\t\t\tif (updates) {\n\t\t\t\t\t\tupdates.records.forEach((record) => {\n\t\t\t\t\t\t\tconst recordMapItem = updates.recordMap.get(record);\n\t\t\t\t\t\t\tif (recordMapItem.root) {\n\t\t\t\t\t\t\t\tinvalidateDeps(record);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tconst invalidateAll = Array.from(recordMapItem.prototypes.values())\n\t\t\t\t\t\t\t\t.some((prototypes) => {\n\t\t\t\t\t\t\t\t\tconst idx = prototypes.indexOf(obj) + 1;\n\t\t\t\t\t\t\t\t\tconst l = prototypes.length;\n\t\t\t\t\t\t\t\t\tlet invalidate = true;\n\t\t\t\t\t\t\t\t\tfor (let i = idx; i < l; i++) {\n\t\t\t\t\t\t\t\t\t\tif (prototypes[i].hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\t\t\t\tinvalidate = false;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn invalidate;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (invalidateAll) {\n\t\t\t\t\t\t\t\t\tinvalidateDeps(record);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// toUpdate.delete(key);\n\n\t\t\t\tif (!manager.inRunSection) {\n\t\t\t\t\tif (manager.options.immediateReaction) {\n\t\t\t\t\t\tmanager.run();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmanager.runDeferred();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\n\t\t\tobservable = new Proxy(dataSource, {\n\t\t\t\tget: (obj, key, context) => {\n\t\t\t\t\tif (key === manager.$isObservableSymbol) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (key === manager.$dataSource) {\n\t\t\t\t\t\treturn dataSource;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (manager.callStack.length) {\n\t\t\t\t\t\tif (key === manager.$registerRead) {\n\t\t\t\t\t\t\treturn registerRead;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tregisterRead(manager.callStack[manager.callStack.length - 1].record, key);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key === manager.options.wholeObjectObserveKey) {\n\t\t\t\t\t\treturn context;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst val = obj[key];\n\t\t\t\t\tif (val === Object(val) && typeof val !== \"function\") {\n\t\t\t\t\t\treturn manager.makeObservable(val);\n\t\t\t\t\t}\n\t\t\t\t\treturn val;\n\t\t\t\t},\n\t\t\t\tset: (obj, key, val) => {\n\t\t\t\t\tif (manager.callStack && manager.callStack.length) {\n\t\t\t\t\t\tthrow new Error(\"Changing observable objects is restricted inside computed properties and reaction functions!\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (val !== obj[key] || (Array.isArray(obj) && key === \"length\")) {\n\t\t\t\t\t\tobj[key] = val;\n\t\t\t\t\t\tupdateProperty(obj, key);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tdeleteProperty: (obj, key) => {\n\t\t\t\t\tupdateProperty(obj, key);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tmanager.observables.set(dataSource, observable);\n\t\t}\n\t\treturn observable;\n\t}\n\t/**\n\t* Создает {@link UpdatableFunction}\n\t* Используется в основном для внутренних целей\n\t*\n\t* @param {Function} call Функция для которой будет создана {@link UpdatableFunction}\n\t* @param {Object} obj Если `call` это метод объекта необходимо указать связанный объект\n\t* @return {UpdatableFunction}\n\t*/\n\tmakeUpdatable (call, obj = null) {\n\t\tconst manager = this;\n\t\tif (obj == null) {\n\t\t\tobj = manager;\n\t\t}\n\t\treturn function () {\n\t\t\tlet cacheByObject = manager.cache.get(obj);\n\t\t\tlet record;\n\t\t\tif (cacheByObject) {\n\t\t\t\trecord = cacheByObject.get(call);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcacheByObject = new Map();\n\t\t\t\tmanager.cache.set(obj, cacheByObject);\n\t\t\t}\n\n\t\t\tif (!record) {\n\t\t\t\trecord = {valid: false, value: undefined, deps: new Set(), uninit: new Map()};\n\t\t\t\tcacheByObject.set(call, record);\n\t\t\t}\n\t\t\tif (record.computing) {\n\t\t\t\tconsole.warn(\"Detected cross reference inside computed properties! undefined will be returned to prevent infinite loop\");\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (manager.callStack.length) {\n\t\t\t\trecord.deps.add(manager.callStack[manager.callStack.length - 1].record);\n\t\t\t}\n\n\t\t\tif (record.valid) {\n\t\t\t\treturn record.value;\n\t\t\t}\n\t\t\trecord.computing = true;\n\t\t\trecord.uninit.forEach(uninit => uninit(record));\n\t\t\trecord.uninit.clear();\n\n\t\t\tmanager.callStack.push({obj, call, record});\n\t\t\ttry {\n\t\t\t\tlet context;\n\t\t\t\tif (this) {\n\t\t\t\t\tcontext = manager.observables.get(this);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcontext = manager;\n\t\t\t\t}\n\n\t\t\t\tconst value = call.call(context, context);\n\t\t\t\trecord.valid = true;\n\t\t\t\trecord.value = value;\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\trecord.computing = false;\n\t\t\t\tmanager.callStack.pop();\n\t\t\t}\n\t\t};\n\t}\n\t/**\n\t* Создает вычисляемое свойство объекта\n\t*\n\t* @param {Object} obj Объект для которого будет создано вычисляемое свойство\n\t* @param {String} key Имя вычисляемого свойства свойства\n\t* @param {Function} callOnGet Функция которая будет вычислятся при доступе к свойству\n\t* @param {Function} [callOnSet] Функция которая будет выполнятся при установке значения свойства\n\t*/\n\tmakeComputed (obj, key, callOnGet, callOnSet) {\n\t\tObject.defineProperty(obj, key, {\n\t\t\tenumerable: true,\n\t\t\tget: this.makeUpdatable(callOnGet, obj),\n\t\t\tset: callOnSet\n\t\t});\n\t}\n\t/**\n\t* Создает {@link UpdatableFunction} и помещает ее в список для проверки\n\t* на валидность при изменении данных. Менеджер автозапускает эту\n\t* функцию если ее результат стал невалидным\n\t*\n\t* @param {Function} call\n\t*\tФункция для которой будет создана {@link UpdatableFunction}\n\t*\tОна будет автозапускатся при изменении {@link Observable} данных использованых при ее вычислении\n\t* @param {Boolean} run\n\t*\tВыполнить первый запуск реации после ее регистрации.\n\t*\tВ зависимости от указанной опции {@link ManagerOptions.immediateReaction}\n\t*\tбудет запускатся либо сразу либо по таймауту.\n\t*\tЕсли {@link ManagerOptions.enabled} == false то реакция не будет выполнятся даже при установленном параметре run\n\t* @return {ReactionHandler} Управляющий объект для зарегестрированной реакции\n\t*/\n\tmakeReaction (call, run = true) {\n\t\tconst manager = this;\n\t\tconst updatable = this.makeUpdatable(call);\n\t\tmanager.reactions.push(updatable);\n\t\tif (run) {\n\t\t\tif (this.options.immediateReaction) {\n\t\t\t\tmanager.run();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmanager.runDeferred();\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tunregister () {\n\t\t\t\tconst idx = manager.reactions.indexOf(updatable);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tmanager.reactions.splice(idx, 1);\n\t\t\t\t}\n\t\t\t},\n\t\t\treaction: updatable\n\t\t};\n\t}\n\n\t/**\n\t* Проверяет является ли объект наблюдаемым\n\t*\n\t* @param {(Observable|Object|Array)} obj\n\t*/\n\tisObservable (obj) {\n\t\treturn obj[this.$isObservableSymbol] === true;\n\t}\n\t/**\n\t* Запускает все автозапускаемые функции которые помечены как невалидные\n\t*\n\t* @param {Function} [action]\n\t*\tДействия выполняемые внутри вызова этой функции\n\t* \tне будут вызывать неотложный запуск реакций.\n\t* \tРеакции будут запущены только после выхода из функции action\n\t*/\n\trun (action) {\n\t\tif (!this.options.enabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.inRunSection = true;\n\t\ttry {\n\t\t\tif (typeof action === \"function\") {\n\t\t\t\taction();\n\t\t\t}\n\t\t\tthis.runScheduled = false;\n\t\t\tthis.reactions.forEach(updatable => updatable());\n\t\t\ttypeof this.onAfterRun === \"function\" && this.onAfterRun();\n\t\t}\n\t\tfinally {\n\t\t\tthis.inRunSection = false;\n\t\t}\n\t}\n\t/**\n\t* Запускает все {@link UpdatableFunction} которые помечены как невалидные\n\t* В отличии от метода {@link run} запускает их не сразу а по указанному таймауту\n\t*\n\t* @param {Function} [action] Изменения {@link Observable} выполняемые внутри вызова этой функции не будут вызывать неотложный запуск реакций. Реакции будут запускатся после заданного таймаута\n\t* @param {Number} [timeout=0] Таймаут запуска выполнения очереди зарегестрированых реакций\n\t*/\n\trunDeferred (action) {\n\t\tif (!this.options.enabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.inRunSection = true;\n\t\ttry {\n\t\t\tif (!this.runScheduled) {\n\t\t\t\tthis.runScheduled = setTimeout(() => this.run());\n\t\t\t}\n\t\t\tif (typeof action === \"function\") {\n\t\t\t\taction();\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.inRunSection = false;\n\t\t}\n\t}\n\t/**\n\t* Возвращает исходный объект на основе которого был создан {@link Observable}\n\t*\n\t* @param {Observable} observable\n\t*\t{@link Observable} для которого необходимо получить исходный объект\n\t* @return {(Object|Array)} Исходный обьект на основе которого был создан {@link Observable}\n\t*/\n\tgetObservableSource (observable) {\n\t\treturn observable[this.$dataSource];\n\t}\n}\n\n\nManager.default = new Manager();\nManager.default.Manager = Manager;\n\nexport default Manager.default;\n\n/**\n * @typedef ManagerOptions\n * @name ManagerOptions\n * @type {Object}\n * @property {Boolean} immediateReaction - Запускать реакции сразу после изменения данных (по-умолчанию false - т.е. реакции выполняются по нулевому таймауту)\n * @property {Boolean} enabled - Активен ли менеджер данных (по-умолчнию true)\n */\n\n /**\n  * @typedef ReactionHandler\n  * @name ReactionHandler\n  * @type {Object}\n  * @property {Function} unregister - Удалить реакцию из списка зарегестрированных реакций\n  * @property {UpdatableFunction} reaction - Фунция реакции\n  */\n\n /**\n  * @typedef Observable\n  * @name Observable\n  * @description Обьект или массив доступ к свойствам которого отслеживается.\n  * При доступе к дочерним объектам или массивам также возвращается {@link Observable} объект\n  */\n\n/**\n * @typedef UpdatableFunction\n * @name UpdatableFunction\n * @description Функция которая кеширует результат своего выполнение и хранит состояние валидности результата\n *\n * При изменении {@link Observable} данных которые были использованы при вычилении этой функции ее кеш инвалидируется\n *\n * Внутри {@link UpdatableFunction} разрешено только чтение {@link Observable}, при записи будет брошено исключение\n *\n * Если внутри таких функций есть перекрестные ссылки то вычисление производится не будет, будет возвращено `undefined`\n */\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"./index.js\").default;\n\n\n\n// WEBPACK FOOTER //\n// ./src/cjs-entry.js"],"sourceRoot":""}